import 'dart:io';
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:hotelbooking/model/lcation.dart';
import 'package:image_picker/image_picker.dart';
import 'package:hotelbooking/service/location_service.dart';

class AddLocationPage extends StatefulWidget {
  @override
  _AddLocationPageState createState() => _AddLocationPageState();
}

class _AddLocationPageState extends State<AddLocationPage> {
  final _formKey = GlobalKey<FormState>();
  final ImagePicker _picker = ImagePicker();
  XFile? _imageFile; // Use XFile for consistency with image_picker
  Uint8List? _imageData; // To hold image data as Uint8List

  // Controllers for form fields
  final TextEditingController _nameController = TextEditingController();


  // Pick an image from gallery
  Future<void> _pickImage() async {
    try {
      final pickedFile = await _picker.pickImage(source: ImageSource.gallery);
      if (pickedFile != null) {
        // Read the image as bytes
        final bytes = await pickedFile.readAsBytes();
        setState(() {
          _imageFile = pickedFile; // Assign the picked file
          _imageData = bytes; // Store the image data
        });
      }
    } catch (e) {
      print('Error picking image: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error picking image: ${e.toString()}')),
      );
    }
  }

  // Save the hotel details
  Future<void> _saveHotel() async {
    if (_formKey.currentState!.validate() && _imageFile != null) {


      final hotel = Location(
        id: 0,
        // will be generated by backend
        name: _nameController.text,

        image: '',
        // This will be handled by the backend

      );

      try {
        // Assuming createHotel accepts an XFile; adjust as needed based on your service method
        await LocationService().createLocation(hotel, _imageFile!);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Location added successfully!')),
        );

        // Clear form fields and reset image
        _nameController.clear();

        _imageFile = null;
        _imageData = null; // Reset image data
        setState(() {});
      } catch (e) {
        print(e);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error adding hotel: ${e.toString()}')),
        );
      }
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
            content: Text('Please complete the form and upload an image.')),
      );
    }
  }





  @override
  Widget build(BuildContext context) {

    return Scaffold(
      appBar: AppBar(title: Text('Add New Hotel')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              TextFormField(
                controller: _nameController,
                decoration: InputDecoration(labelText: 'Hotel Name'),
                validator: (value) =>
                value == null || value.isEmpty ? 'Enter hotel name' : null,
              ),

              SizedBox(height: 16),
              TextButton.icon(
                icon: Icon(Icons.image),
                label: Text('Upload Image'),
                onPressed: _pickImage,
              ),
              if (_imageData != null)
                Image.memory(_imageData!, height: 150, fit: BoxFit.cover),
              // Display image
              SizedBox(height: 16),
              ElevatedButton(
                onPressed: _saveHotel,
                child: Text('Save Hotel'),
              ),
            ],
          ),
        ),
      ),
    );


  }
}